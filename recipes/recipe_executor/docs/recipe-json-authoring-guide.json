{
  "title": "Recipe JSON Authoring Guide",
  "general_instruction": "This document serves as a guide for effectively writing recipe JSON files for simple to complex levels of automation. Recipients of this file will not have access to the resource files that are available during the drafting of this document, so please be sure to include all relevant information in the document itself. The document should be structured in a way that is easy to read and understand, with clear headings and sections. Use the provided outline as a guide for the structure of the document. The document should be written in a way that is accessible to users who may not have a technical background.",
  "resources": [
    {
      "key": "recipe_executor_code",
      "path": "ai_context/generated/RECIPE_EXECUTOR_CODE_FILES.md",
      "description": "Roll-up of the recipe executor code files. These files were generated by the recipe executor itself, using the recipe executor recipe files."
    },
    {
      "key": "recipe_executor_recipes",
      "path": "ai_context/generated/RECIPE_EXECUTOR_RECIPE_FILES.md",
      "description": "Recipe files used for generating the recipe executor code files. In addition to the recipe files, this roll-up includes the individual component 'docs' and 'spec' files that define each component. The component `docs` files can serve as documentation for the component."
    },
    {
      "key": "sample_recipes",
      "path": "ai_context/generated/BLUEPRINT_GENERATOR_V4_FILES.md, ai_context/generated/DOCUMENT_GENERATOR_FILES.md",
      "description": "Additional sample recipes that show other ways to use the recipe tools for different use cases and ways to use Python Liquid templating, the various step types, etc."
    },
    {
      "key": "modular_design_philosophy",
      "path": "ai_context/MODULAR_DESIGN_PHILOSOPHY.md",
      "description": "The modular design philosophy document. This document describes the modular design philosophy of our work, with can be applied to how we construct recipes as well."
    },
    {
      "key": "implementation_philosophy",
      "path": "ai_context/IMPLEMENTATION_PHILOSOPHY.md",
      "description": "The implementation philosophy document. This document describes the implementation philosophy of our work, with can be applied to how we construct recipes as well."
    },
    {
      "key": "liquid_docs",
      "path": "ai_context/git_collector/LIQUID_PYTHON_DOCS.md",
      "description": "Documentation for the Python Liquid templating engine. This includes the Liquid syntax, filters, and tags that can be used in recipe JSON files. Consider the contents of actual recipe files and the generated code as the primary source of truth for how to use Liquid templating in recipes, as we have discovered some issues with the Liquid documentation."
    }
  ],
  "sections": [
    {
      "title": "Introduction",
      "prompt": "Write an opening that:\n- Defines what the overall recipe framework is, what a recipe JSON file is and how the Recipe Executor runs it.\n- States that this guide targets both *human* developers and *LLM* assistants that must generate valid recipes from natural-language requests.\n- Lists the main topics that will follow (basic structure → context → step types → templating → best practices → snippets).",
      "refs": ["recipe_executor_code", "recipe_executor_recipes"]
    },
    {
      "title": "Basic Recipe Structure",
      "prompt": "Using the executor's code & example recipes as ground truth, explain:\n1. The required top-level `\"steps\"` array (must be valid/strict JSON without comments, etc.; unknown step `type` raises an error).\n2. Optional blocks (`inputs`, `outputs`, `description`) and how the executor ignores unknown keys.\n3. A **minimal runnable example** (just one step) plus a **slightly larger skeleton** showing `set_context`, `read_files`, `execute_recipe`, `loop`, `write_files`.\nKeep prose to a useful, but not overly verbose length; rely on code snippets, mermaid diagrams, and bullet lists where appropriate.",
      "refs": [
        "recipe_executor_code",
        "sample_recipes",
        "recipe_executor_recipes"
      ]
    },
    {
      "title": "Working with Objects Between Recipe Steps",
      "prompt": "Describe the shared *context* object:\n- How each step reads/writes keys (pass by reference, no manual serialization needed).\n- Common patterns (`set_context`, `context_overrides` in `execute_recipe`).\n- Call out **common mistakes** (e.g., unnecessary JSON filters, forgetting to set a `result_key` in loops).\nProvide at least *three* code snippets: simple value pass, complex object pass, loop iteration collecting results.",
      "refs": ["recipe_executor_code", "sample_recipes"]
    },
    {
      "title": "Built-in Step Types and Configuration",
      "prompt": "Give a concise overview (≤ 2 short paragraphs) of the Recipe Executor's built-in step types: why they matter, how the reference entries below are structured, and when to consult them. Finish with a bulleted list of all current step type names pulled from the resource code, so readers know what's covered in the subsections.",
      "refs": [
        "recipe_executor_code",
        "recipe_executor_recipes",
        "sample_recipes"
      ],
      "sections": [
        {
          "title": "`read_files`",
          "prompt": "From the resource docs, write a full reference entry for this step: purpose, when to use, key configuration (with defaults), notable pitfalls, and at least one runnable example (more if important to show variants of use cases).",
          "refs": ["recipe_executor_recipes", "sample_recipes"]
        },

        {
          "title": "`write_files`",
          "prompt": "From the resource docs, write a full reference entry for this step: purpose, when to use, key configuration (with defaults), notable pitfalls, and at least one runnable example (more if important to show variants of use cases).",
          "refs": ["recipe_executor_recipes", "sample_recipes"]
        },

        {
          "title": "`set_context`",
          "prompt": "From the resource docs, write a full reference entry for this step: purpose, when to use, key configuration (with defaults), notable pitfalls, and at least one runnable example (more if important to show variants of use cases).",
          "refs": ["recipe_executor_recipes", "sample_recipes"]
        },

        {
          "title": "`conditional`",
          "prompt": "From the resource docs, write a full reference entry for this step: purpose, when to use, key configuration (with defaults), notable pitfalls, and at least one runnable example (more if important to show variants of use cases).",
          "refs": ["recipe_executor_recipes", "sample_recipes"]
        },

        {
          "title": "`loop`",
          "prompt": "From the resource docs, write a full reference entry for this step: purpose, when to use, key configuration (with defaults), notable pitfalls, and at least one runnable example (more if important to show variants of use cases).",
          "refs": ["recipe_executor_recipes", "sample_recipes"]
        },

        {
          "title": "`parallel`",
          "prompt": "From the resource docs, write a full reference entry for this step: purpose, when to use, key configuration (with defaults), notable pitfalls, and at least one runnable example (more if important to show variants of use cases).",
          "refs": ["recipe_executor_recipes", "sample_recipes"]
        },

        {
          "title": "`execute_recipe`",
          "prompt": "From the resource docs, write a full reference entry for this step: purpose, when to use, key configuration (with defaults), notable pitfalls, and at least one runnable example (more if important to show variants of use cases).",
          "refs": ["recipe_executor_recipes", "sample_recipes"]
        },

        {
          "title": "`llm_generate`",
          "prompt": "From the resource docs, write a full reference entry for this step: purpose, when to use, key configuration (with defaults), notable pitfalls, and at least one runnable example (more if important to show variants of use cases).",
          "refs": ["recipe_executor_recipes", "sample_recipes"]
        },

        {
          "title": "`mcp`",
          "prompt": "From the resource docs, write a full reference entry for this step: purpose, when to use, key configuration (with defaults), notable pitfalls, and at least one runnable example (more if important to show variants of use cases).",
          "refs": ["recipe_executor_recipes", "sample_recipes"]
        }
      ]
    },
    {
      "title": "Using Liquid Templating for Dynamic Content",
      "prompt": "Explain Liquid features supported by the executor (template substitutions, filters like `default`, loops, conditionals, `json`, `snakecase`, etc.).\nShow *four* diverse examples (dynamic path, default fallback, building a list with `for`, inline conditional).\nThen introduce a **sub-section** on embedding large content blocks:",
      "refs": ["liquid_docs", "recipe_executor_code", "sample_recipes"],
      "sections": [
        {
          "title": "Embedding Large Content in Prompts",
          "prompt": "Using code and earlier docs as reference, teach the technique of wrapping big pasted docs in distinctive ALL-CAPS XML-like tags (e.g., `<SPEC>` … `</SPEC>`):\n- Why this helps LLMs focus or ignore sections.\n- Dos & Don'ts table (one tag per line, close every tag, treat as opaque, etc.).\n- Show a prompt snippet that injects a large markdown blob using this wrapper.",
          "refs": ["recipe_executor_code", "sample_recipes"]
        }
      ]
    },
    {
      "title": "Best Practices and Patterns",
      "prompt": "Summarize *at least eight* actionable guidelines (concise bullets) covering:\n- Designing small, focused recipes; reusing sub-recipes.\n- Clear context keys & avoiding magic strings.\n- Guarding with `conditional` & optional file reads.\n- Loop/parallel concurrency & `fail_fast` considerations.\n- **Always supply `result_key` in loops** even if ignored.\n- **Token-budget / prompt-length advice** - suggest summarizing or wrapping large content.\n- Merge semantics with `set_context` (strings concatenate, lists append, dicts shallow-merge).",
      "refs": [
        "modular_design_philosophy",
        "implementation_philosophy",
        "recipe_executor_code",
        "sample_recipes"
      ]
    },
    {
      "title": "Recipe Cookbook",
      "prompt": "Provide **four** ready-to-paste snippets covering common automation patterns:\n1. Conditional file check & fallback.\n2. Batch loop over items (with concurrency).\n3. Parallel independent tasks.\n4. Reusing logic via `execute_recipe` (sub-recipe composition).\nFor each snippet include: purpose, typical use cases, natural-language flow summary, a Mermaid diagram (if helpful), and the JSON snippet.\nEnsure snippets compile against current executor code.",
      "refs": [
        "recipe_executor_code",
        "sample_recipes",
        "recipe_executor_recipes"
      ]
    },
    {
      "title": "Conclusion",
      "prompt": "Write a wrap-up that recaps the major points (structure, context, templating, best practices) and encourages readers/LLMs to apply these principles when generating new recipes. End with an invitation to iterate and refine recipes as requirements evolve.",
      "refs": []
    }
  ]
}
