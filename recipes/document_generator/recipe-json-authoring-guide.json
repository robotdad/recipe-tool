{
  "title": "Recipe JSON Authoring Guide",
  "general_instruction": "This document serves as a guide for effectively writing recipe JSON files for simple to complex levels of automation. Recipients of this file will not have access to the resource files that are available during the drafting of this document, so please be sure to include all relevant information in the document itself. The document should be structured in a way that is easy to read and understand, with clear headings and sections. Use the provided outline as a guide for the structure of the document. The document should be written in a way that is accessible to users who may not have a technical background.",
  "resources": [
    {
      "key": "recipe_executor_code",
      "path": "ai_context/generated/RECIPE_EXECUTOR_CODE_FILES.md",
      "description": "Roll-up of the recipe executor code files. These files were generated by the recipe executor itself, using the recipe executor recipe files."
    },
    {
      "key": "recipe_executor_recipes",
      "path": "ai_context/generated/RECIPE_EXECUTOR_RECIPE_FILES.md",
      "description": "Recipe files used for generating the recipe executor code files. In addition to the recipe files, this roll-up includes the individual component 'docs' and 'spec' files that define each component. The component `docs` files can serve as documentation for the component."
    },
    {
      "key": "sample_recipes",
      "path": "ai_context/generated/BLUEPRINT_GENERATOR_V4_FILES.md, ai_context/generated/DOCUMENT_GENERATOR_FILES.md",
      "description": "Additional sample recipes that show other ways to use the recipe tools for different use cases and ways to use Python Liquid templating, the various step types, etc."
    },
    {
      "key": "modular_design_philosophy",
      "path": "ai_context/git_collector/MODULAR_DESIGN_PHILOSOPHY.md",
      "description": "The modular design philosophy document. This document describes the modular design philosophy of our work, with can be applied to how we construct recipes as well."
    },
    {
      "key": "implementation_philosophy",
      "path": "ai_context/git_collector/IMPLEMENTATION_PHILOSOPHY.md",
      "description": "The implementation philosophy document. This document describes the implementation philosophy of our work, with can be applied to how we construct recipes as well."
    },
    {
      "key": "liquid_docs",
      "path": "ai_context/git_collector/LIQUID_PYTHON_DOCS.md",
      "description": "Documentation for the Python Liquid templating engine. This includes the Liquid syntax, filters, and tags that can be used in recipe JSON files. Consider the contents of actual recipe files and the generated code as the primary source of truth for how to use Liquid templating in recipes, as we have discovered some issues with the Liquid documentation."
    }
  ],
  "sections": [
    {
      "title": "Basic Recipe Structure",
      "prompt": "Explain the basic structure of a recipe JSON file, and how they are used with the recipe executor.",
      "refs": [
        "recipe_executor_code",
        "recipe_executor_recipes",
        "sample_recipes"
      ]
    },
    {
      "title": "Built-in Step Types and Configuration",
      "prompt": "List and describe the built-in step types used in recipe JSON files. Include details about their configuration options and how to use them effectively. What you produce is the ONLY documentation that some users of the system will so, so please be sure to be exhaustive and accurate with this based upon the per-component 'docs', 'spec', and code files. Provide examples of each step type.",
      "refs": [
        "recipe_executor_code",
        "recipe_executor_recipes",
        "sample_recipes"
      ]
    },
    {
      "title": "Working with Objects Between Recipe Steps",
      "prompt": "Describe how to work with objects between recipe steps. Explain the concept of 'context' and how to pass data between steps. Provide examples of how to use context variables in different steps.",
      "refs": [
        "recipe_executor_code",
        "recipe_executor_recipes",
        "sample_recipes"
      ]
    },
    {
      "title": "Using Liquid Templating for Dynamic Content",
      "prompt": "Explain how to use Liquid templating in recipe JSON files. Provide examples of how to create dynamic content using Liquid syntax. Discuss common use cases for Liquid templating in recipes.",
      "refs": [
        "liquid_docs",
        "recipe_executor_code",
        "recipe_executor_recipes",
        "sample_recipes"
      ]
    },
    {
      "title": "Best Practices and Patterns",
      "prompt": "Outline best practices and patterns for writing recipe JSON files. Discuss common pitfalls to avoid and tips for maintaining readability, reusability, composability, and organization.",
      "refs": [
        "recipe_executor_code",
        "recipe_executor_recipes",
        "sample_recipes",
        "modular_design_philosophy",
        "implementation_philosophy"
      ]
    },
    {
      "title": "Recipe Cookbook",
      "prompt": "Create snippets of recipes that can be dropped-in for specific scenarios. Each one should include a brief description of the main purpose of the snippet, the potential use cases, a natural language representation of the flow, a mermaid diagram if appropriate, and the sample JSON representation. Discuss how to adapt these recipes for different scenarios.",
      "refs": [
        "recipe_executor_code",
        "recipe_executor_recipes",
        "sample_recipes"
      ]
    }
  ]
}
